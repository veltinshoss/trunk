<project name="iphoneanalyzer" default="help" basedir=".">


	<!--
			Jar naming conventions:
			
			fat - contains libs as along with our code
			thin - contains just our code
	-->
	<property environment="env" />
	<property name="src" value="./src" />
	<property name="dist" value="./dist" />
	<property name="testsrc" value="./testsrc" />
	<property name="resources" value="./resources" />
	<property name="classes" value="${dist}/classes" />
	<property name="distclasses" value="${dist}/distclasses" />
	<property name="jarbasename" value="${dist}/${ant.project.name}" />
	<property name="tempjar" value="${jarbasename}.temp.jar" />
	<property name="fatjar" value="${jarbasename}.fat" />
	<property name="fatjar_gui" value="${fatjar}.gui.jar" />
	<property name="fatjar_lib" value="${fatjar}.lib.jar" />
	<property name="fatjar_applet" value="${fatjar}.applet.jar" />
	<property name="fatjar_applet_signed" value="${jarbasename}.fat.signed.jar" />
	<property name="javakeystore" value="cb_keystore.bin" />
	<property name="javadocjar" value="${jarbasename}.javadoc.jar" />
	<property name="climainclass" value="monkeypuzzle.Cli" />
	<property name="guimainclass" value="monkeypuzzle.ForensicGui" />
	<property name="libentryclass" value="monkeypuzzle.central.BackupDirectoryParser" />
	<property name="dumpmainclass" value="monkeypuzzle.TextDump" />
	<property name="appletmainclass" value="monkeypuzzle.ui.swing.app.fileviewer.FileViewerApplet" />
	<property name="javadoc" value="./javadoc/" />
	<property name="lib" value="./lib" />
	<property name="test" value="./test" />
	<property name="instr" value="./instru" />
	<property name="xml" value="./xml" />
	<property name="testresults" value="./testresults" />
	<property name="cover" value="./cover" />
	<property name="manifest" value="./META-INF/MANIFEST.MF" />
	<property name="cobertura.dir" value="${lib}" />

	<taskdef name="classdepandjar" classname="org.jini.rio.tools.ant.ClassDepAndJarTask">
		<classpath>
			<pathelement location="./lib/classdepandjar.jar" />
		</classpath>
	</taskdef>

	<path id="cobertura.classpath">
		<fileset dir="${cobertura.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />


	<target name="help">
		<echo>
Targets:
	clean     - remove all generated files
	compile   - build the code
	jar.gui - Produce an executable jar file (gui) containing libs and cated code
	jar.cmd - Produce an executable jar file (cmd) containing libs and cated code
	jar.lib - Produce a jar file (lib) containing libs and cated code for integration into other tools
	jar.applet - Create an cated applet
	update.website.code - Update website with new builds of software
		</echo>
	</target>

	<target name="init" depends="clean">
		<path id="classpath">
			<fileset dir="${lib}" includes="**/**.jar" />
		</path>
		<mkdir dir="${dist}" />
		<mkdir dir="${classes}" />
		<mkdir dir="${instr}" />
		<mkdir dir="${xml}" />
		<mkdir dir="${testresults}" />
		<mkdir dir="${javadoc}" />
	</target>

	<target name="update.website.code" depends="jar.signed">
		<copy file="${fatjar_applet_signed}" todir="website/crypticbit.com/www/tools" />
	</target>

	<target name="compile" depends="init">
		<javac destdir="${classes}" debug="true" includes="**/*.java">
			<src path="${src}" />
			<classpath>
				<path refid="classpath" />
			</classpath>
		</javac>
	</target>

	<target name="jar.gui" depends="compile">
		<property name="outputjar" value="${fatjar_gui}" />
		<property name="mainclass" value="${guimainclass}" />
		<antcall target="jar.common" />
	</target>

	<target name="jar.lib" depends="compile">
		<property name="outputjar" value="${fatjar_lib}" />
		<property name="mainclass" value="${libentryclass}" />
		<antcall target="jar.common" />
	</target>

	<target name="jar.applet" depends="compile">
		<property name="outputjar" value="${fatjar_applet}" />
		<property name="mainclass" value="${appletmainclass}" />
		<antcall target="jar.common" />
	</target>


	<target name="jar.depend">
		<classdepandjar jarfile="${tempjar}" files="true" >
			<classpath>
				<fileset dir="${lib}/runtime/" includes="**/**.jar"/>
				<pathelement location="${classes}" />
			</classpath>
<!--			<in name="monkeypuzzle" /> -->
			<topclass name="${mainclass}" />
		</classdepandjar>
	</target>

	<target name="jar.signed" depends="jar.applet">
		<signjar fatjar_applet_signed="${fatjar_applet_signed}" alias="IphoneFileViewer" storepass="password" preservelastmodified="true" jar="${fatjar_applet}" keystore="${javakeystore}">
		</signjar>
	</target>

	<!-- do not use this target directly -->
	<target name="jar.common" depends="jar.depend">
		<jar destfile="${outputjar}">
			<fileset dir="${resources}" />
			<zipfileset src="${tempjar}" />
			<zipgroupfileset dir="${lib}/runtime/forceinclude" includes="**/**.jar" />
			<manifest>
				<attribute name="Main-Class" value="${mainclass}" />
			</manifest>
		</jar>
	</target>

	<target name="testcompile" depends="init,compile">
		<javac destdir="${classes}" debug="true" includes="**/*.java">
			<src path="${testsrc}" />
			<classpath>
				<path refid="classpath" />
			</classpath>
		</javac>
	</target>

	<target name="instrument" depends="compile,testcompile">
		<mkdir dir="${instr}" />
		<delete file="cobertura.ser" />
		<cobertura-instrument todir="${instr}">
			<fileset dir="${classes}">
				<include name="**/*.class" />
			</fileset>
		</cobertura-instrument>
	</target>

	<target name="test2" depends="compile,testcompile">
		<junit dir="." printsummary="on" fork="on" showoutput="off">
			<classpath>
				<path refid="classpath" />
			</classpath>
			<classpath location="${classes}" />
			<classpath refid="cobertura.classpath" />
			<env key="LD_LIBRARY_PATH" path="${env.LD_LIBRARY_PATH}:${dist}" />
			<formatter type="xml" />
			<batchtest todir="${xml}">
				<fileset dir="${instr}">
					<include name="**/*Test.class" />
				</fileset>
			</batchtest>
		</junit>
		<junitreport todir="${testresults}">
			<fileset dir="${xml}">
				<include name="*.xml" />
			</fileset>
			<report format="frames" todir="${testresults}" />
		</junitreport>
	</target>

	<target name="test" depends="compile,testcompile,instrument">
		<junit dir="." printsummary="on" fork="on" showoutput="off">
			<classpath>
				<path refid="classpath" />
			</classpath>
			<classpath location="${instr}" />
			<classpath refid="cobertura.classpath" />
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${basedir}/cobertura.ser" />
			<env key="LD_LIBRARY_PATH" path="${env.LD_LIBRARY_PATH}:${dist}" />
			<formatter type="xml" />
			<batchtest todir="${xml}">
				<fileset dir="${instr}">
					<include name="**/*Test.class" />
				</fileset>
			</batchtest>
		</junit>
		<junitreport todir="${testresults}">
			<fileset dir="${xml}">
				<include name="*.xml" />
			</fileset>
			<report format="frames" todir="${testresults}" />
		</junitreport>
	</target>

	<target name="coverage" depends="test">
		<mkdir dir="${cover}" />
		<cobertura-report format="html" destdir="${cover}" srcdir="${src}" />
	</target>

	<target name="clean" depends="">
		<delete dir="${classes}" />
		<delete dir="${dist}" />
		<delete dir="${javadoc}" />
		<delete dir="${xml}" />
		<delete dir="${testresults}" />
		<delete dir="${instr}" />
		<delete dir="${cover}" />
		<delete file="cobertura.ser" />
	</target>

	<target name="javadoc" depends="init">
		<javadoc packagenames="monkeypuzzle.*" private="false" destdir="${javadoc}" version="true" splitindex="true" noindex="false" maxmemory="256m" classpath="${classes}" excludepackagenames="monkeypuzzle.test.*" defaultexcludes="yes">
			<sourcepath>
				<pathelement path="src" />
			</sourcepath>
			<classpath>
				<path refid="classpath" />
			</classpath>
		</javadoc>
	</target>

	<target name="javadocjar" depends="javadoc">
		<jar destfile="${javadocjar}" basedir="${javadoc}" index="false" compress="false" />
	</target>

</project>
